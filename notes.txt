Apa yang sudah kita lakukan sebenarnya sama saja dengan bagian Pendahuluan. Bedanya, Anda meletakkan class Main di dalam package com.dicoding.javafundamental.basic. Ayo kita lanjut!

Ketika setiap class diletakkan di dalam sebuah package, bagaimana cara memanggil class tertentu di antara class lain yang berbeda package-nya? Caranya adalah dengan memanggil nama package secara lengkap, kemudian diikuti nama class-nya. Hal ini biasa disebut dengan istilah Fully Qualified Name. Misalnya, fully qualified name dari class  Main yang baru saja kita buat adalah:

com.dicoding.javafundamental.basic.Main

Import
Import digunakan untuk menyederhanakan pemanggilan class yang berbeda package. Alhasil, Anda tak perlu menyebutkan fully qualified name dari class yang ingin digunakan. Dari pengertian ini juga tersirat kita tak perlu juga menyebutkan fully qualified name jika dalam package yang sama.

Khusus untuk class dari package java.lang, ia tidak perlu dipanggil menggunakan fully qualified name. Artinya tidak perlu menggunakan import saat memanggilnya, misalnya class java.lang.System yang kita gunakan untuk print “Hello world!”. Perhatikan bahwa kode di bawah ini:  System.out.println("Hello world!");

Pada kode di atas, kita hanya memanggil class dengan nama class System tanpa nama package-nya.

Bagaimana kalau kita import beberapa class dari package yang sama? Kita bisa menggunakan wildcard (simbol *) untuk menggantikan nama class-nya. Artinya, Java akan otomatis mengenali seluruh class dari package tersebut. 

Classpath adalah mekanisme di Java untuk menemukan class lain. Biasanya class lain tersebut berasal dari library yang berbeda atau bahkan JDK itu sendiri (kita sudah memakai class System). Jika Java tidak bisa menemukan class yang kita panggil melalui kode kita, akan terjadi error ClassNotFoundException atau NoClassDefFoundError. Error ini biasa terjadi bagi pemula Java karena biasanya belum paham konsep classpath atau ada kesalahan pengaturan classpath.

Praktik yang kita lakukan barusan adalah menambahkan library (file jar) secara manual ke proyek. Cara ini sebenarnya kurang efektif jika dilakukan untuk proyek besar. Bayangkan jika kita menggunakan library A yang bergantung (dependencies) ke library B, C, D, lalu library B bergantung ke library X dan Y. Cukup bikin repot kan? Solusinya, gunakan tools seperti maven atau gradle. Pembahasan maven dan gradle di luar cakupan dari class ini. Saran kami, bacalah referensi yang ada di bawah karena kedua tools tersebut sudah menjadi standar dalam development Java.

Java merupakan bahasa pemrograman yang strongly typed, maka kita tidak bisa mengabaikan tipe data. Kita harus tahu data seperti apa yang disimpan ke dalam variabel. Selain itu, Java juga bersifat statically typed, yang artinya setiap variabel harus dideklarasikan terlebih dahulu sebelum digunakan. Terdapat 2 (dua) jenis tipe data pada Java, yaitu tipe data primitive/primitif dan reference/referensi. 

Tipe data primitif adalah tipe data standar yang tidak diturunkan dari objek manapun. Tipe data primitif telah ditentukan dengan kata kuncinya masing-masing. Terdapat 8 (delapan) tipe data primitif yang Java dukung, antara lain:
1. Byte
Tipe data integer 8 bit yang digunakan untuk menampung angka dalam range yang kecil. Nilai minimum dan maksimum dari tipe data ini adalah -128, dan 127. Tipe data byte memiliki nilai default 0. Ia digunakan untuk menghemat ruang dalam array yang besar, terutama pada bilangan bulat, karena 1 (satu) byte 4 (empat) kali lebih kecil dari tipe data int.
2. Short
Merupakan tipe data integer 16 bit yang digunakan untuk menampung angka dalam range menengah, yaitu antara -32,768 sampai 32,767. Sama seperti tipe sebelumnya, nilai default-nya 0. Ia bisa digunakan untuk menghemat memori seperti tipe data byte namun hanya 2 (dua) kali lebih kecil dari tipe data int.
3. Int
Merupakan tipe data integer 32 bit yang digunakan untuk menyimpan angka dalam range cukup besar, yakni antara -2,147,483,648 sampai 2,147,483,647 dengan nilai default 0. Jika kita tidak memperhatikan penggunaan memori, tipe data inilah yang biasanya dipakai.
4. Long
Merupakan tipe data integer yang lebih besar jika dibandingkan dengan tipe data int. Ukurannya 64 bit dan bisa digunakan untuk menyimpan angka dengan range antara -9,223,372,036,854,775,808 sampai 9,223,372,036,854,775,807. Tipe data long memiliki nilai default 0L.
5. Float
Merupakan sebuah tipe data yang bisa digunakan untuk menampung angka desimal. Nilai default-nya 0.0f.
6. Double
Merupakan sebuah tipe data yang mirip seperti tipe data float, namun memiliki kapasitas yang lebih besar. Nilai default-nya 0.0d.
7. Boolean
Merupakan sebuah tipe data yang memiliki 2 (dua) macam nilai, yaitu true dan false. Nilai default-nya false.
8. Char
Merupakan sebuah tipe data yang bisa digunakan untuk menampung karakter. Nilai karakter tersebut dibungkus di dalam tanda ''.

Tipe Data Reference
Tipe data reference merupakan sebuah tipe data yang merujuk ke sebuah objek atau instance dari sebuah class. Salah satu tipe data yang termasuk ke dalam tipe data reference adalah string. Tipe data string menunjuk ke instance dari class java.lang.String. 

Di dalam bahasa pemrograman Java, string merupakan sebuah tipe data reference. Tipe data ini diperlakukan sebagai sebuah obyek. String adalah kumpulan beberapa karakter (char). String sendiri sebenarnya merupakan sebuah class yang terdapat dalam library Java dan digunakan untuk memanipulasi karakter. Contoh sintaks untuk mendeklarasikan sebuah string: String greeting = "Hello World!";

Perlu diperhatikan bahwa kelas String bersifat final. Alhasil, kita tidak bisa mengubah nilai dari objek yang sudah kita buat. Jika kita ingin mengubah nilai tersebut, kita membutuhkan StringBuffer dan StringBuilder.

Kelas String memiliki sebuah method untuk mengetahui panjang dari sebuah string, yakni method length(). Fungsi tersebut akan mengembalikan/menghasilkan sejumlah karakter dari string, contohnya:

String dicoding = "dicoding";
int length = dicoding.length();
System.out.println(length);

Kita juga bisa mengambil sebuah karakter secara spesifik dari sebuah String dengan menggunakan method charAt(int index) yang sudah tersedia dalam kelas String.

String dicoding = "dicoding";
char result = dicoding.charAt(7); //dimulai dari index 0
System.out.println(result);

Maka jika Anda menjalankan kode di atas, konsol akan menampilkan karakter urutan ke-8 dari teks tersebut, yaitu "g".
Beberapa kumpulan method dalam kelas String: https://docs.oracle.com/javase/7/docs/api/java/lang/String.html

Operator
Operator dalam Java merupakan suatu simbol yang digunakan untuk melakukan suatu operasi tertentu (memanipulasi, mengolah) satu atau lebih variabel. Variabel yang dioperasikan disebut sebagai operand. Bahasa Java memiliki banyak operator yang dapat digunakan dan bisa dikelompokkan menjadi beberapa kategori, seperti : https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html
(AAUEC)
Operasi Assignment
Operasi Arithmetic
Operasi Unary
Operasi Equality and Relational
Operasi Conditional

Operasi Unary
Merupakan operator yang melakukan berbagai operasi Aritmatik yang hanya melibatkan satu operand. Operasi-operasi tersebut dapat berupa penambahan, pengurangan atau membalik suatu nilai dari bolean.

Pada bahasa pemrograman Java, Basic Input-nya sudah dibekali beberapa library untuk membantu pengambilan Input berbasis teks. Beberapa di antaranya: Bufferedreader;;Scanner
Sedangkan untuk menampilkan atau Output dari program adalah: Print;;Println

Scanner
Scanner merupakan kelas yang menyediakan fungsi-fungsi untuk membaca dan mengambil input dari pengguna. Scanner memiliki kemudahan yang dapat membaca teks, baik yang memiliki tipe data primitif maupun string.

Control flow dalam bahasa Indonesia dapat diartikan sebagai aliran kendali. Maksud sebenarnya dari control flow adalah bagaimana urutan eksekusi perintah di dalam program.

Case tanpa break akan menjalankan semua kode setelah case yang terpilih. Jadi dengan mengambil contoh kode di atas, dengan nilai inputan adalah char 'C', maka kode program akan masuk ke dalam case 'C'. Di dalamnya nilai variabel output akan ditambah dengan 1 karena pemanggilan operator ++. Dan karena tidak ada break maka program akan melanjutkan menjalankan case setelahnya yaitu case 'D', case 'E', dan default. Dan masing-masing di dalam case ada pemanggilan operator ++, sehingga nilai akhir dari output-nya adalah 4.

Gunakanlah if-else ketika kondisinya merupakan range dari suatu nilai atau kondisi,. Sebabnya, karena if-else bisa menggunakan operator seperti > atau <. Sedangkan untuk  switch, gunakanlah ketika kondisinya hanya satu pilihan seperti integer, char, dan tipe lainnya.

Dari komponen pembentuk Java Collections Framework bisa kita lihat salah satu perbedaan Collection dengan Array. Misalnya Array tidak mempunyai method untuk sorting atau jumlah elemen di Array tidak bisa dinamis. Sementara Collection bisa dinamis.

Dapat disimpulkan bahwa Collection adalah struktur data yang lebih kompleks dan lebih canggih dibanding Array. Untuk itu setiap programmer wajib menguasai Java Collections Framework. Sebabnya, kita akan selalu berurusan dengan data saat membuat aplikasi.

Dalam materi ini kita hanya akan membahas Java Collections Framework yang paling sering digunakan yaitu List, Set, dan Map. Sebagian Implementasi dari ketiga interface tersebut bisa kita lihat di tabel di bawah ini.

List 
	List<String> planets = new ArrayList<>();
        planets.add("mercury"); // method add() untuk menambahkan objek ke List
        planets.remove("venus"); // method remove() untuk mengeluarkan objek dari Set

Set
Set mirip dengan List hanya saja objek di dalam Set tidak bisa diduplikasi. Yang artinya jika objek yang sama dimasukkan beberapa kali ke dalam Set maka Set hanya akan menyimpan objek tersebut satu kali saja. Coba ingat kembali materi Inheritance bagian Overriding dan Overloading. Perbedaan lain antara Set dengan List adalah penyimpanan pada Set tidak teratur.

Set<String> planets = new HashSet<>();
for (Iterator iterator = planets.iterator(); iterator.hasNext(); )

Map
Map adalah struktur data dalam bentuk pasangan key-value. Map sama dengan “associative array “ dalam bahasa PHP. Objek disimpan di Map sebagai value menggunakan key yang harus unik dan harus berupa objek juga. Salah satu implementasi dari interface Map adalah class HashMap. 

	for (String key : planets.keySet()) { // looping key dari Map
	    // method get() untuk melihat isi Map berdasarkan key
	    System.out.println("\t " + key + " : " + planets.get(key));
	}

	for (Planet planet : planets.values()) { // looping value dari Map
	    System.out.println("\t " + planet);
	}

Berikut ini adalah beberapa istilah yang sering digunakan dalam konsep OOP.

Class dan Object
Kelas (terjemahan dari class) dan obyek (terjemahan dari object) adalah hal paling dasar yang harus kita pelajari. Kita akan belajar bagaimana membuat suatu kelas dan menggunakaanya di dalam suatu program.
Method
Suatu metode mendefinisikan perilaku obyek yang dibuat dari kelas. Metode dapat berupa prosedur atau fungsi.
Member
Di materi ini kita akan belajar lebih dalam lagi tentang member (semua yang dideklarasikan) di dalam suatu kelas.
Access Modifier
Di sini kita akan belajar tentang hak akses dari suatu kelas, metode, dan data member. Ada beberapa macam modifier yaitu private, default, protected, dan public.
Encapsulation
Encapsulation adalah metode untuk membundling suatu data dan metode di dalam kelas. Di dalamnya juga akan ada materi tentang bagaimana mengaksesnya dengan memanfaatkan metode di dalam kelas.
Inheritance
Inheritance adalah pewarisan, suatu kelas dapat diturunkan dari kelas lain sehingga mewarisi data dan metode dari kelas lain tersebut. Materi inheritance sangat penting di dalam OOP.
Interface
Selain inheritance, kita juga akan belajar tentang interface. Interface mirip seperti kelas, tetapi hanya berisi method signature (nama, parameter dan return).

Lalu apa kegunaan Constructor? Memberikan nilai awal terhadap suatu data atau obyek dan Mengalokasikan ruang sebuah kelas dalam obyek

Pada Java untuk membuat sebuah obyek terdapat 3 tahap :
1. Declaration : mendeklarasikan nama sebuah obyek
2. Instantiation : memerlukan sebuah perintah new untuk menciptakan obyek
3. Initialization : inisialisasi dari sebuah obyek setelah perintah new

Function
Fungsi pada Java dideklarasikan di dalam sebuah kelas. Fungsi pada Java bertugas untuk mengembalikan nilai. Sedangkan untuk fungsi yang tidak mengembalikan nilai (void) disebut sebagai prosedur. Baik fungsi maupun prosedur di dalam suatu kelas kita sebut sebagai metode. Metode merupakan aspek yang penting di dalam Java. Dalam sebuah kelas bisa terdapat banyak metode sesuai dengan kegunaannya masing-masing.

Cara membuat sebuah fungsi di dalam kelas adalah sebagai berikut :
modifier: menunjukkan sifat yang dimiliki pada suatu fungsi seperti public, private, protected.
returnType: merupakan nilai balik yang diberikan oleh fungsi. Apabila fungsi tidak memiliki nilai balik maka menggunakan void.
nameOfFunction: adalah nama dari sebuah fungsi.
parameters: bersifat opsional, Suatu fungsi dapat mempunyai banyak parameters atau pun tidak sama sekali.

    public static double hitungLuas(double panjang, double lebar){
        double luas = panjang * lebar;
        return luas;
    }

    double hasil = hitungLuas(p, l); //memanggil fungsi

Overloading adalah sebuah method yang memiliki nama method yang sama dengan method lain yang membedakan adalah parameter pada method tersebut dalam satu class. Perbedaan parameter meliputi jumlah parameter, tipe data parameter, urutan tipe data parameter.

contoh method pada kelas
    void makan(){
        System.out.println("Makan dengan menggunakan mulut..");
    }
contoh fungsi pada kelas
    double getBerat() {
        return berat;
    }