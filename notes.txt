Apa yang sudah kita lakukan sebenarnya sama saja dengan bagian Pendahuluan. Bedanya, Anda meletakkan class Main di dalam package com.dicoding.javafundamental.basic. Ayo kita lanjut!

Ketika setiap class diletakkan di dalam sebuah package, bagaimana cara memanggil class tertentu di antara class lain yang berbeda package-nya? Caranya adalah dengan memanggil nama package secara lengkap, kemudian diikuti nama class-nya. Hal ini biasa disebut dengan istilah Fully Qualified Name. Misalnya, fully qualified name dari class  Main yang baru saja kita buat adalah:

com.dicoding.javafundamental.basic.Main

Import
Import digunakan untuk menyederhanakan pemanggilan class yang berbeda package. Alhasil, Anda tak perlu menyebutkan fully qualified name dari class yang ingin digunakan. Dari pengertian ini juga tersirat kita tak perlu juga menyebutkan fully qualified name jika dalam package yang sama.

Khusus untuk class dari package java.lang, ia tidak perlu dipanggil menggunakan fully qualified name. Artinya tidak perlu menggunakan import saat memanggilnya, misalnya class java.lang.System yang kita gunakan untuk print “Hello world!”. Perhatikan bahwa kode di bawah ini:  System.out.println("Hello world!");

Pada kode di atas, kita hanya memanggil class dengan nama class System tanpa nama package-nya.

Bagaimana kalau kita import beberapa class dari package yang sama? Kita bisa menggunakan wildcard (simbol *) untuk menggantikan nama class-nya. Artinya, Java akan otomatis mengenali seluruh class dari package tersebut. 

Classpath adalah mekanisme di Java untuk menemukan class lain. Biasanya class lain tersebut berasal dari library yang berbeda atau bahkan JDK itu sendiri (kita sudah memakai class System). Jika Java tidak bisa menemukan class yang kita panggil melalui kode kita, akan terjadi error ClassNotFoundException atau NoClassDefFoundError. Error ini biasa terjadi bagi pemula Java karena biasanya belum paham konsep classpath atau ada kesalahan pengaturan classpath.

Praktik yang kita lakukan barusan adalah menambahkan library (file jar) secara manual ke proyek. Cara ini sebenarnya kurang efektif jika dilakukan untuk proyek besar. Bayangkan jika kita menggunakan library A yang bergantung (dependencies) ke library B, C, D, lalu library B bergantung ke library X dan Y. Cukup bikin repot kan? Solusinya, gunakan tools seperti maven atau gradle. Pembahasan maven dan gradle di luar cakupan dari class ini. Saran kami, bacalah referensi yang ada di bawah karena kedua tools tersebut sudah menjadi standar dalam development Java.

Java merupakan bahasa pemrograman yang strongly typed, maka kita tidak bisa mengabaikan tipe data. Kita harus tahu data seperti apa yang disimpan ke dalam variabel. Selain itu, Java juga bersifat statically typed, yang artinya setiap variabel harus dideklarasikan terlebih dahulu sebelum digunakan. Terdapat 2 (dua) jenis tipe data pada Java, yaitu tipe data primitive/primitif dan reference/referensi. 

Tipe data primitif adalah tipe data standar yang tidak diturunkan dari objek manapun. Tipe data primitif telah ditentukan dengan kata kuncinya masing-masing. Terdapat 8 (delapan) tipe data primitif yang Java dukung, antara lain:
1. Byte
Tipe data integer 8 bit yang digunakan untuk menampung angka dalam range yang kecil. Nilai minimum dan maksimum dari tipe data ini adalah -128, dan 127. Tipe data byte memiliki nilai default 0. Ia digunakan untuk menghemat ruang dalam array yang besar, terutama pada bilangan bulat, karena 1 (satu) byte 4 (empat) kali lebih kecil dari tipe data int.
2. Short
Merupakan tipe data integer 16 bit yang digunakan untuk menampung angka dalam range menengah, yaitu antara -32,768 sampai 32,767. Sama seperti tipe sebelumnya, nilai default-nya 0. Ia bisa digunakan untuk menghemat memori seperti tipe data byte namun hanya 2 (dua) kali lebih kecil dari tipe data int.
3. Int
Merupakan tipe data integer 32 bit yang digunakan untuk menyimpan angka dalam range cukup besar, yakni antara -2,147,483,648 sampai 2,147,483,647 dengan nilai default 0. Jika kita tidak memperhatikan penggunaan memori, tipe data inilah yang biasanya dipakai.
4. Long
Merupakan tipe data integer yang lebih besar jika dibandingkan dengan tipe data int. Ukurannya 64 bit dan bisa digunakan untuk menyimpan angka dengan range antara -9,223,372,036,854,775,808 sampai 9,223,372,036,854,775,807. Tipe data long memiliki nilai default 0L.
5. Float
Merupakan sebuah tipe data yang bisa digunakan untuk menampung angka desimal. Nilai default-nya 0.0f.
6. Double
Merupakan sebuah tipe data yang mirip seperti tipe data float, namun memiliki kapasitas yang lebih besar. Nilai default-nya 0.0d.
7. Boolean
Merupakan sebuah tipe data yang memiliki 2 (dua) macam nilai, yaitu true dan false. Nilai default-nya false.
8. Char
Merupakan sebuah tipe data yang bisa digunakan untuk menampung karakter. Nilai karakter tersebut dibungkus di dalam tanda ''.

Tipe Data Reference
Tipe data reference merupakan sebuah tipe data yang merujuk ke sebuah objek atau instance dari sebuah class. Salah satu tipe data yang termasuk ke dalam tipe data reference adalah string. Tipe data string menunjuk ke instance dari class java.lang.String. 

Di dalam bahasa pemrograman Java, string merupakan sebuah tipe data reference. Tipe data ini diperlakukan sebagai sebuah obyek. String adalah kumpulan beberapa karakter (char). String sendiri sebenarnya merupakan sebuah class yang terdapat dalam library Java dan digunakan untuk memanipulasi karakter. Contoh sintaks untuk mendeklarasikan sebuah string: String greeting = "Hello World!";

Perlu diperhatikan bahwa kelas String bersifat final. Alhasil, kita tidak bisa mengubah nilai dari objek yang sudah kita buat. Jika kita ingin mengubah nilai tersebut, kita membutuhkan StringBuffer dan StringBuilder.

Kelas String memiliki sebuah method untuk mengetahui panjang dari sebuah string, yakni method length(). Fungsi tersebut akan mengembalikan/menghasilkan sejumlah karakter dari string, contohnya:

String dicoding = "dicoding";
int length = dicoding.length();
System.out.println(length);

Kita juga bisa mengambil sebuah karakter secara spesifik dari sebuah String dengan menggunakan method charAt(int index) yang sudah tersedia dalam kelas String.

String dicoding = "dicoding";
char result = dicoding.charAt(7); //dimulai dari index 0
System.out.println(result);

Maka jika Anda menjalankan kode di atas, konsol akan menampilkan karakter urutan ke-8 dari teks tersebut, yaitu "g".
Beberapa kumpulan method dalam kelas String: https://docs.oracle.com/javase/7/docs/api/java/lang/String.html

Operator
Operator dalam Java merupakan suatu simbol yang digunakan untuk melakukan suatu operasi tertentu (memanipulasi, mengolah) satu atau lebih variabel. Variabel yang dioperasikan disebut sebagai operand. Bahasa Java memiliki banyak operator yang dapat digunakan dan bisa dikelompokkan menjadi beberapa kategori, seperti : https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html
(AAUEC)
Operasi Assignment
Operasi Arithmetic
Operasi Unary
Operasi Equality and Relational
Operasi Conditional

Operasi Unary
Merupakan operator yang melakukan berbagai operasi Aritmatik yang hanya melibatkan satu operand. Operasi-operasi tersebut dapat berupa penambahan, pengurangan atau membalik suatu nilai dari bolean.

Pada bahasa pemrograman Java, Basic Input-nya sudah dibekali beberapa library untuk membantu pengambilan Input berbasis teks. Beberapa di antaranya: Bufferedreader;;Scanner
Sedangkan untuk menampilkan atau Output dari program adalah: Print;;Println

Scanner
Scanner merupakan kelas yang menyediakan fungsi-fungsi untuk membaca dan mengambil input dari pengguna. Scanner memiliki kemudahan yang dapat membaca teks, baik yang memiliki tipe data primitif maupun string.

Control flow dalam bahasa Indonesia dapat diartikan sebagai aliran kendali. Maksud sebenarnya dari control flow adalah bagaimana urutan eksekusi perintah di dalam program.

Case tanpa break akan menjalankan semua kode setelah case yang terpilih. Jadi dengan mengambil contoh kode di atas, dengan nilai inputan adalah char 'C', maka kode program akan masuk ke dalam case 'C'. Di dalamnya nilai variabel output akan ditambah dengan 1 karena pemanggilan operator ++. Dan karena tidak ada break maka program akan melanjutkan menjalankan case setelahnya yaitu case 'D', case 'E', dan default. Dan masing-masing di dalam case ada pemanggilan operator ++, sehingga nilai akhir dari output-nya adalah 4.

Gunakanlah if-else ketika kondisinya merupakan range dari suatu nilai atau kondisi,. Sebabnya, karena if-else bisa menggunakan operator seperti > atau <. Sedangkan untuk  switch, gunakanlah ketika kondisinya hanya satu pilihan seperti integer, char, dan tipe lainnya.

Dari komponen pembentuk Java Collections Framework bisa kita lihat salah satu perbedaan Collection dengan Array. Misalnya Array tidak mempunyai method untuk sorting atau jumlah elemen di Array tidak bisa dinamis. Sementara Collection bisa dinamis.

Dapat disimpulkan bahwa Collection adalah struktur data yang lebih kompleks dan lebih canggih dibanding Array. Untuk itu setiap programmer wajib menguasai Java Collections Framework. Sebabnya, kita akan selalu berurusan dengan data saat membuat aplikasi.

Dalam materi ini kita hanya akan membahas Java Collections Framework yang paling sering digunakan yaitu List, Set, dan Map. Sebagian Implementasi dari ketiga interface tersebut bisa kita lihat di tabel di bawah ini.

List 
	List<String> planets = new ArrayList<>();
        planets.add("mercury"); // method add() untuk menambahkan objek ke List
        planets.remove("venus"); // method remove() untuk mengeluarkan objek dari Set

Set
Set mirip dengan List hanya saja objek di dalam Set tidak bisa diduplikasi. Yang artinya jika objek yang sama dimasukkan beberapa kali ke dalam Set maka Set hanya akan menyimpan objek tersebut satu kali saja. Coba ingat kembali materi Inheritance bagian Overriding dan Overloading. Perbedaan lain antara Set dengan List adalah penyimpanan pada Set tidak teratur.

Set<String> planets = new HashSet<>();
for (Iterator iterator = planets.iterator(); iterator.hasNext(); )

Map
Map adalah struktur data dalam bentuk pasangan key-value. Map sama dengan “associative array “ dalam bahasa PHP. Objek disimpan di Map sebagai value menggunakan key yang harus unik dan harus berupa objek juga. Salah satu implementasi dari interface Map adalah class HashMap. 

	for (String key : planets.keySet()) { // looping key dari Map
	    // method get() untuk melihat isi Map berdasarkan key
	    System.out.println("\t " + key + " : " + planets.get(key));
	}

	for (Planet planet : planets.values()) { // looping value dari Map
	    System.out.println("\t " + planet);
	}

Berikut ini adalah beberapa istilah yang sering digunakan dalam konsep OOP.

Class dan Object
Kelas (terjemahan dari class) dan obyek (terjemahan dari object) adalah hal paling dasar yang harus kita pelajari. Kita akan belajar bagaimana membuat suatu kelas dan menggunakaanya di dalam suatu program.
Method
Suatu metode mendefinisikan perilaku obyek yang dibuat dari kelas. Metode dapat berupa prosedur atau fungsi.
Member
Di materi ini kita akan belajar lebih dalam lagi tentang member (semua yang dideklarasikan) di dalam suatu kelas.
Access Modifier
Di sini kita akan belajar tentang hak akses dari suatu kelas, metode, dan data member. Ada beberapa macam modifier yaitu private, default, protected, dan public.
Encapsulation
Encapsulation adalah metode untuk membundling suatu data dan metode di dalam kelas. Di dalamnya juga akan ada materi tentang bagaimana mengaksesnya dengan memanfaatkan metode di dalam kelas.
Inheritance
Inheritance adalah pewarisan, suatu kelas dapat diturunkan dari kelas lain sehingga mewarisi data dan metode dari kelas lain tersebut. Materi inheritance sangat penting di dalam OOP.
Interface
Selain inheritance, kita juga akan belajar tentang interface. Interface mirip seperti kelas, tetapi hanya berisi method signature (nama, parameter dan return).

Lalu apa kegunaan Constructor? Memberikan nilai awal terhadap suatu data atau obyek dan Mengalokasikan ruang sebuah kelas dalam obyek

Pada Java untuk membuat sebuah obyek terdapat 3 tahap :
1. Declaration : mendeklarasikan nama sebuah obyek
2. Instantiation : memerlukan sebuah perintah new untuk menciptakan obyek
3. Initialization : inisialisasi dari sebuah obyek setelah perintah new

Function
Fungsi pada Java dideklarasikan di dalam sebuah kelas. Fungsi pada Java bertugas untuk mengembalikan nilai. Sedangkan untuk fungsi yang tidak mengembalikan nilai (void) disebut sebagai prosedur. Baik fungsi maupun prosedur di dalam suatu kelas kita sebut sebagai metode. Metode merupakan aspek yang penting di dalam Java. Dalam sebuah kelas bisa terdapat banyak metode sesuai dengan kegunaannya masing-masing.

Cara membuat sebuah fungsi di dalam kelas adalah sebagai berikut :
modifier: menunjukkan sifat yang dimiliki pada suatu fungsi seperti public, private, protected.
returnType: merupakan nilai balik yang diberikan oleh fungsi. Apabila fungsi tidak memiliki nilai balik maka menggunakan void.
nameOfFunction: adalah nama dari sebuah fungsi.
parameters: bersifat opsional, Suatu fungsi dapat mempunyai banyak parameters atau pun tidak sama sekali.

    public static double hitungLuas(double panjang, double lebar){
        double luas = panjang * lebar;
        return luas;
    }

    double hasil = hitungLuas(p, l); //memanggil fungsi

Overloading adalah sebuah method yang memiliki nama method yang sama dengan method lain yang membedakan adalah parameter pada method tersebut dalam satu class. Perbedaan parameter meliputi jumlah parameter, tipe data parameter, urutan tipe data parameter.

contoh method pada kelas
    void makan(){
        System.out.println("Makan dengan menggunakan mulut..");
    }
contoh fungsi pada kelas
    double getBerat() {
        return berat;
    }

Private
Access modifier private akan membatasi akses hanya di dalam class. Private biasanya digunakan sebagai modifier dari member dan metode suatu class. 

Default
Default modifier berarti penulisan kodenya tanpa atribut modifier. Ini berlaku untuk semua kelas, member, atau fungsi yang kita tuliskan tanpa access modifier.Modifier default bisa diakses selama masih dalam satu package.

Protected
Access modifier protected bisa diakses selama masih dalam satu package. Protected memiliki sedikit perbedaan dengan default modifier. Perbedaannya adalah protected bisa diakses dari luar package. Akan tetapi, satu-satunya cara untuk akses dari luar package adalah kelas yang hendak mengakses, merupakan kelas turunannya.

Public
Access modifier public bisa kita sebut sebagai modifier global. Artinya bisa diakses dari manapun bahkan package yang berbeda.

Non Access Modifier
Java juga mengenal modifier lainnya yaitu tipe non access modifier. Ada beberapa non access modifier yaitu static, final, transient,  dan synchronize.
Static : perlu diketahui juga bahwa static variable hanya berjumlah satu, tak  peduli berapapun obyek yang dibuat. 

Static Methods
Metode yang berdiri sendiri tanpa perlu instance dari kelas.

Final
Non access modifier kedua adalah final. Ada 3 macam penggunaan non access modifier final yaitu final variabel, final methods dan final class.
Final Methods
Metode yang dideklarasikan final maka tidak dapat di override oleh anak kelas.
Final Class
Kelas yang dideklarasikan sebagai final maka tidak bisa dijadikan sebagai induk kelas.

Transient
Transient memiliki hubungan dengan proses serialisasi (serializing). Serialisasi adalah proses konversi suatu objek menjadi byte agar dapat ditransmisikan.

Synchronized
Synchronized modifier digunakan untuk membatasi akses ke suatu variable/methods yang hanya boleh dilakukan oleh satu thread. Ketika ada 2 thread yang ingin mengakses synchronized variable/methods, maka prosesnya akan dilakukan secara serial (bergantian).

Interface
Pada bahasa pemrograman Java interface sangat mirip dengan kelas, tapi tanpa atribut kelas dan memiliki metode yang dideklarasikan tanpa isi. Deklarasi metode pada sebuah interface dapat diimplementasikan oleh kelas lain. 

Interface harus dapat digunakan ke kelas lain. Cara untuk mengimplementasi interface yaitu menggunakan keyword implements pada kelas yang mengimplementasikannya. Kelas yang mengimplementasi interface (bisa lebih dari 1 interface) harus mendefinisikan isi kode semua deklarasi metode yang ada pada interface tersebut.

Pada pemrograman berorientasi objek atau OOP, konsep inheritance menjadi salah satu topik yang penting. Suatu objek diwariskan dengan menggunakan keyword extends. Pada pemrograman Java setiap objek pada kenyataannya adalah turunan dari class Object. Walaupun tidak secara eksplisit, ini bisa dibuktikan dengan operator instanceof.

1. Super Class atau Parent Class, kelas yang semua fiturnya di wariskan kepada kelas turunannya. 
2. Sub Class atau Child Class, kelas turunan yang mewarisi semua fitur dari kelas lain. Sub class dapat menambah field dan metodenya sendiri sebagai tambahan dari kelas yang memberi warisan.
3. Reusability, yaitu ketika kita ingin membuat kelas baru dan sudah ada kelas yang berisi kode yang kita inginkan, kita bisa menurunkan kelas baru tersebut dari kelas yang sudah ada. Dengan begitu, kita menggunakan kembali field dan metode dari kelas yang telah ada.

Ada kalanya metode yang diwariskan perlu diubah sesuai kebutuhan spesifik dari sub-class tersebut. Perubahan dapat dilakukan dengan 2 cara yaitu overriding dan overloading. 
1. Overriding adalah pembuatan metode baru pada subclass yang sama persis dengan superclassnya, sedangkan 
2. Overloading adalah pembuatan metode baru pada subclass yang sama dengan method superclass namun parameternya berbeda. 

Maka setiap objek akan otomatis mewarisi method dari class Object. Sebagian metode yang sering digunakan adalah metode toString() dan equals(). Metode toString() bisa kita gunakan untuk merepresentasikan objek dalam bentuk String yang sangat berguna salah satunya untuk debugging. Sedangkan metode equals() digunakan untuk membandingkan antara dua objek, apakah mereka sama. Metode equals() biasanya kita override karena kebutuhan khusus.

Polymorphism
Polymorphism artinya banyak bentuk. Contohnya, kucing adalah seekor Hewan, kucing juga adalah sebuah objek. Artinya kucing bisa dikenali dalam banyak bentuk. Lalu apa maknanya bagi pemrograman khususnya Java? 

Konsep inheritance digunakan untuk abstraksi dari yang paling umum ke yang lebih spesifik. Misalnya class Hewan adalah bentuk yang umum, lalu class Kucing adalah turunannya yang lebih spesifik.

Sedangkan interface digunakan sebagai kontrak atau aturan. Class yang menerapkan suatu interface wajib override semua method dari interface tersebut. Artinya class tersebut harus mengikuti aturan atau spesifikasi yang ada di interface.

interface menggunakan Implements sedangkan Inheritance menggunakan extends.

Sampai sini, Anda sudah paham perbedaan Inheritance dan Interface? Ingat saja kata kuncinya inheritance adalah abstraksi sedangkan interface adalah kontrak. Happy coding :) 

Common class sendiri merupakan kelas yang sering atau umum digunakan dari pustaka standar Java tersebut. Berikut Common Class yang akan kita pelajari:

1.Generic
Generics pada Java memperbolehkan tipe (String, Integer, dll, serta user defined) bisa menjadi suatu parameter untuk metode, class dan interface. Generics juga berfungsi untuk type casting dan compile time safety.
2.Exception
Eror adalah hal yang perlu kita tangani. Nah, di sini  kita bisa menggunakan exception.
3.Input Output
Di Java sudah tersedia library untuk membaca input dari suatu berkas dan juga menuliskan data ke suatu berkas.
4.Date Time
Di Java sudah tersedia library yang khusus berurusan dengan waktu.
5.Casting
Mengubah suatu tipe data atau objek menjadi tipe data atau objek lainnya, akan menjadi mudah dengan menggunakan casting yang sudah tersedia di dalam Java.

Suatu saat kode program kita akan menjadi besar, ribuan baris kode! Bayangkan jika kita tidak menggunakan type-parameter saat deklarasi objek Collection. Lalu objek tersebut digunakan di tempat lainnya, misal dikirim sebagai parameter ke suatu method. Bisa saja tanpa sadar kita memasukkan tipe objek yang salah dan baru akan ketahuan ketika program dijalankan. Pusing kan? Nah, gunakan type-parameter. Paling tidak kita akan terbantu karena masalah terdeteksi lebih dini saat compile.

public static void print(Collection<Object> collection) 
print(cp); // Apakah baris ini valid? tidak

public static void print(Collection<?> collection)
print(cp); // Baris ini valid

Pada dasarnya ada 3 jenis exception berdasarkan kategorinya.
1. Checked Exception, adalah exception yang terjadi saat compile time. Di sini programmer harus menambahkan kode untuk meng-handle exception kategori ini. Jika tidak di-handle maka kode yang dituliskan akan error dan tidak akan bisa dikompilasi. Contohnya adalah exception java.io.FileNotFoundException.
2. Unchecked Exception, adalah exception yang terjadi saat execution time. Eror ini terjadi dalam lingkup internal dari aplikasi kita, biasanya terjadi karena salah penulisan kode atau penggunaan salah terhadap satu API. Contohnya adalah NullPointerException.
3. Error, adalah exception yang diluar kendali user atau programmer. Eror ini terjadi di lingkup eksternal dari aplikasi kita. Ketika exception ini terjadi maka tidak ada yang bisa kita lakukan untuk mengatasinya, contohnya ketika perangkat kerasnya rusak saat kita ingin membaca data.

Dari definisi di atas maka error exception dan unchecked exception termasuk dari exception yang berada pada execution time. Sebabnya, keduanya hanya dialami ketika program sudah berjalan. Perbedaanya adalah unchecked berada di dalam internal program kita, sedangkan error exception berada di eksternal program kita. Kemudian kode apa yang harus kita tambahkan untuk mengatasi berbagai macam exception tersebut? Kita harus kenal dengan 3 block kode yaitu try, catch, dan finally.

Try-Catch 
Kode yang rawan dengan exception kita masukkan ke dalam block try-catch. Kode yang kita masukkan ke dalam block try-catch biasa disebut sebagai protected code. Kodenya sepert ini.

Finally
Block finally adalah block yang di tambahkan di akhir block try-catch. Finally akan selalu dijalankan setelah try-catch baik terjadi exception atau tidak. Finally bermanfaat ketika kita ingin melakukan cleanup code. Cleanup code di sini maksudnya adalah de-alokasi sumber daya, Artinya semua sumber daya yang dibuka atau digunakan pada blok try seperti koneksi jaringan, database, berkas, stream, dll akan ditutup dengan menjalankan instruksi yang ditulis pada blok finally.

File Navigation
Untuk navigasi, kita bisa menggunakan objekFile yang bisa menampilkan daftar berkas dan direktori. Dengan menggunakan objek File, kita bisa membuat directory dengan menggunakan fungsi mkdir() atau mkdirs.

java.util.Calendar
Kelas yang memiliki spesifik method untuk mengkonversi waktu dan tanggal

java.text.SimpleDateFormat
Kelas yang membantu menterjemahkan format waktu dalam bentuk String ke format date time serta sebaliknya

CurrentTimeMillis
Merupakan method bagian dari kelas System yang menampilkan waktu sekarang dalam satuan milisecond (1000 milisecond = 1 second). CurrentTimeMillis() mengembalikan jumlah waktu mulai dari 1-1-1970 sampai dengan waktu yang sekarang. System.currentTimeMillis() biasanya digunakan untuk mengukur suatu waktu yang dibutuhkan dengan lebih spesifik. Ia biasa juga dipakai untuk tambahan sebagai variabel unik.

Casting
Sering kali kita ingin mengubah suatu tipe data tertentu ke bentuk tipe data lain dalam suatu variabel. Perubahan ini disebut dengan istilah casting. 

Kita dapat melakukan casting terhadap beberapa tipe data. Bagaimana jika kita akan melakukan casting dari double ke dalam bentuk string? Dengan cara mendeklarasikan variabel sebagai String dan menggunakan fungsi String.valueOf. Berikut ini contohnya:

double a = 3.14;
String hasil = String.valueOf(a);
System.out.println(hasil);

Selain untuk mengubah atau mengkonversikan tipe data menjadi tipe data lain dalam suatu variabel, casting juga dapat digunakan untuk mengkonversi kelas menjadi kelas lain. Untuk menkonversi kelas terdapat dua metode yaitu Upcasting dan Downcasting. Upcasting adalah casting dari subclass ke superclass sementara downcasting adalah casting dari superclass ke subclass.

Hewan hewan2 = new Kucing();
((Kucing) hewan2).meow(); //downcast hewan2 ke kucing, casting dari superclass ke subclass

